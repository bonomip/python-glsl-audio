#version 330 core

out vec4 FragColor;

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform float u_time;

#define iTime u_time

/*
*
*
*   Copy and paste your function down here
*
*                  ___
*                  | |
*                  | |
*               ___| |___
*               \       /
*                \     /
*                 \   /
*                  \ /
*                   '
*
*/

vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * vec3(.1031,.11369,.13787));
    p3 += dot(p3, p3.yxz+19.19);
    return -1.0 + 2.0 * fract(vec3(p3.x+p3.y, p3.x+p3.z, p3.y+p3.z)*p3.zyx);
}
float snoise3(vec3 p)
{
    const float K1 = 0.333333333;
    const float K2 = 0.166666667;
    
    vec3 i = floor(p + (p.x + p.y + p.z) * K1);
    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);
    
    vec3 e = step(vec3(0.0), d0 - d0.yzx);
	vec3 i1 = e * (1.0 - e.zxy);
	vec3 i2 = 1.0 - e.zxy * (1.0 - e);
    
    vec3 d1 = d0 - (i1 - K2);
    vec3 d2 = d0 - (i2 - K1);
    vec3 d3 = d0 - 0.5;
    
    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);
    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));
    
    return dot(vec4(31.316), n);
}

float circles(vec2 uv, vec2 center, float rad, float thickness, float blur, float noiseScale, float noiseSpeed){
    
    float i = step(0.0, sin(iTime*20.)); //phase
    
    float n0 = snoise3( vec3(uv * noiseScale, iTime * noiseSpeed) ) * 0.5 + 0.5;
    
    float r0 = mix(mix(rad, 1.0, 0.4), mix(rad, 1.0, 0.6), n0);
    float d = distance( uv, r0 / length(uv+center) * uv );
    d = sin(d*5.0 - sin(d)+1.)/8.*(iTime+250.);
    d = smoothstep(thickness, thickness+blur, d);
    
    d = (1. - d ) * i - d * (i - 1.) ; //inverse the color according to phase
    
    return d;

}

/*  
*
*                   .
*                  / \
*                 /   \
*                /     \
*               /__   __\
*                  | |
*                  | |
*                  |_|      
*
*/

void main(void)
{    
    vec3 iResolution = vec3(u_resolution.x, u_resolution.y, 0.0);
    vec2 fragCoord = gl_FragCoord.xy;
    vec4 fragColor;
    
    /*
    *
    *
    *   Copy and paste shadertoy code down here
    *
    *                  ___
    *                  | |
    *                  | |
    *               ___| |___
    *               \       /
    *                \     /
    *                 \   /
    *                  \ /
    *                   '
    *
    */

    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
    
    uv *= 5.;
    
    float freq = 1. / (iTime+1.);
    
    vec3 col = vec3(0.);
     
    col += circles(
        uv,            // uv coodr 
        vec2(0., .0),  // center
        4.5,            // radius
        0.06,          // thickness
        0.005,         // blur
        .7,           // noise scale
        2.5            // noise speed
    );
    
    fragColor += vec4(col, 1.0);

    /*  
    *
    *                   .
    *                  / \
    *                 /   \
    *                /     \
    *               /__   __\
    *                  | |
    *                  | |
    *                  |_|      
    *
    */

    FragColor = fragColor;
}