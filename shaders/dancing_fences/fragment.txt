#version 330 core

out vec4 FragColor;

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform float u_time;

//shader toy remapping variables
#define iTime u_time

float fn(float d){
    return sin(d*8.0 + iTime*2.0)/ clamp(0.45, 0.1, ( smoothstep( 1.0, 0.1, abs( cos( iTime/1.0))) +0.1 )) /6.0;
}

void main(void)
{    
    vec3 iResolution = vec3(u_resolution.x, u_resolution.y, 0.0);
    vec2 fragCoord = gl_FragCoord.xy;
    vec4 fragColor;
    
    /*
    *
    *
    *   Copy and paste shadertoy code down here
    *
    *                  ___
    *                  | |
    *                  | |
    *               ___| |___
    *               \       /
    *                \     /
    *                 \   /
    *                  \ /
    *                   '
    *
    */

    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
    
    uv *= 2.0;
    uv = fract(uv);
    uv -= 0.5;
    
    vec3 col = vec3(0.0, 0.0, 0.0);

    vec2 up = vec2(1.0, .0);

    float d = length(uv);
    vec2 n_uv = uv / d;
    float c = dot(up, n_uv);
    d -= 0.6;
    d = abs(d);
    d = smoothstep(.05, .1, d);
    d = .02 / d;
    
    //float accumulator = texelFetch(iChannel0, ivec2(0.0, 0.0), 0).x;
    //float bright =  texelFetch(iChannel0, ivec2(0.0, 0.0), 0).y;
    float accumulator = u_time;
    float bright = 0.1;

    col += d / sin(abs(c)*8. + accumulator)*bright*12.0;

    // Output to screen
    fragColor = vec4(col, 1.0);

    /*  
    *
    *                   .
    *                  / \
    *                 /   \
    *                /     \
    *               /__   __\
    *                  | |
    *                  | |
    *                  |_|      
    *
    */

    FragColor = fragColor;
}